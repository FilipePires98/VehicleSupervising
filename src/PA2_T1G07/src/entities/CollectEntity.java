package entities;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import kafkaUtils.Producer;
import message.Message;
import message.MessageSerializer;

/**
 * Class for the Collect Entity for the car supervising system.
 * This entity reads data from the file CAR.TXT and produces messages of different types from that data to the BatchTopic, ReportTopic and AlarmTopic.
 * 
 * @author Filipe Pires (85122) and Jo√£o Alegria (85048)
 */
public class CollectEntity extends JFrame {
    
    /**
     * Reader responsible for IO interactions with the file CAR.TXT.
     */
    private BufferedReader CAR;
    /**
     * Names of the topics where the entity sends messages to.
     */
    private String[] topicNames = new String[]{"BatchTopic", "ReportTopic", "AlarmTopic"};
    
    /**
     * Flag signaling if a file is being processed.
     */
    private boolean processFile;

    /**
     * Creates new form CollectEntity.
     */
    public CollectEntity() {
        this.setTitle("Collect Entity");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topicsToIncludeLabel = new javax.swing.JLabel();
        batchTopicCheckbox = new javax.swing.JCheckBox();
        reportTopicCheckbox = new javax.swing.JCheckBox();
        alarmTopicCheckbox = new javax.swing.JCheckBox();
        pathToCarDataLabel = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();
        startBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logs = new javax.swing.JTextArea();
        stopBtn = new javax.swing.JButton();
        timeoutLabel = new javax.swing.JLabel();
        timeout = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 360));
        setSize(new java.awt.Dimension(500, 360));

        topicsToIncludeLabel.setText("Topics to include:");

        batchTopicCheckbox.setSelected(true);
        batchTopicCheckbox.setText("BatchTopic");

        reportTopicCheckbox.setSelected(true);
        reportTopicCheckbox.setText("ReportTopic");

        alarmTopicCheckbox.setSelected(true);
        alarmTopicCheckbox.setText("AlarmTopic");

        pathToCarDataLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        pathToCarDataLabel.setText("Path to Car Data (.txt):");

        filePath.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        filePath.setText("(default path is ~/<ProjectLocation>/src/data)");

        startBtn.setText("Start");
        startBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBtnMouseClicked(evt);
            }
        });

        logs.setColumns(20);
        logs.setRows(5);
        jScrollPane1.setViewportView(logs);

        stopBtn.setText("Stop");
        stopBtn.setToolTipText("");
        stopBtn.setEnabled(false);
        stopBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopBtnMouseClicked(evt);
            }
        });

        timeoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeoutLabel.setText("Timeout(s):");

        timeout.setModel(new javax.swing.SpinnerNumberModel(0, 0, 2, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pathToCarDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startBtn)
                        .addGap(18, 18, 18)
                        .addComponent(timeoutLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeout, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stopBtn)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topicsToIncludeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(batchTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reportTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alarmTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(filePath, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(6, 6, 6))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topicsToIncludeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(batchTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alarmTopicCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathToCarDataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeoutLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startBtn)
                        .addComponent(stopBtn)
                        .addComponent(timeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates the Kafka producers and sends messages to each topic according to the data it reads from the CAR.TXT. 
     * 
     * @param evt mouse event triggered, not used in our context
     */
    private void startBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseClicked
        
        this.processFile=true;
        stopBtn.setEnabled(true);
        startBtn.setEnabled(false);
        timeout.setEnabled(false);
        
        Thread p = new Thread(new ProcessFile());
        p.start();
        
        
    }//GEN-LAST:event_startBtnMouseClicked

    private void stopBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopBtnMouseClicked
        stopBtn.setEnabled(false);
        startBtn.setEnabled(true);
        timeout.setEnabled(true);
        
        this.processFile=false;
    }//GEN-LAST:event_stopBtnMouseClicked
    
    /**
     * Collect entity's main method, responsible for creating and displaying the GUI.
     * Arguments are not needed.
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        System.out.println("[Collect] Running...");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CollectEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CollectEntity().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alarmTopicCheckbox;
    private javax.swing.JCheckBox batchTopicCheckbox;
    private javax.swing.JTextField filePath;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logs;
    private javax.swing.JLabel pathToCarDataLabel;
    private javax.swing.JCheckBox reportTopicCheckbox;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    private javax.swing.JSpinner timeout;
    private javax.swing.JLabel timeoutLabel;
    private javax.swing.JLabel topicsToIncludeLabel;
    // End of variables declaration//GEN-END:variables

 
    /**
     * Class that serves as a Java Thread for the processing of data files.
     * CollectEntity instantiates this class when the user initiates data collection and transmission in order to read the data that will serve as input.
     */
    private class ProcessFile implements Runnable{

        /**
         * Run method of the thread class.
         * Here lies the entire logic of CollectEntity, where data is read and sent to the Kafka topics.
         */
        @Override
        public void run() {
            Map<Integer, Integer> processedMessages = new HashMap<Integer, Integer>();
            processedMessages.put(0,0);
            processedMessages.put(1,0);
            processedMessages.put(2,0);

            int total=0;
            
            String bootstrapServers = "localhost:9092, localhost:9093 ,localhost:9094";

            Properties heartbeatProps = new Properties();
            heartbeatProps.put("bootstrap.servers", bootstrapServers);
            heartbeatProps.put("key.serializer", "org.apache.kafka.common.serialization.IntegerSerializer");
            heartbeatProps.put("value.serializer", MessageSerializer.class.getName());
//            heartbeatProps.put("max.in.flight.requests.per.connection", 10);
            heartbeatProps.put("ack", "0");

            Properties speedProps = new Properties();
            speedProps.put("bootstrap.servers", bootstrapServers);
            speedProps.put("key.serializer", "org.apache.kafka.common.serialization.IntegerSerializer");
            speedProps.put("value.serializer", MessageSerializer.class.getName());
            speedProps.put("max.in.flight.requests.per.connection", 1);
            speedProps.put("enable.idempotence", true);
            speedProps.put("acks", "all");

            Properties statusProps = new Properties();
            statusProps.put("bootstrap.servers", bootstrapServers);
            statusProps.put("key.serializer", "org.apache.kafka.common.serialization.IntegerSerializer");
            statusProps.put("value.serializer", MessageSerializer.class.getName());
            statusProps.put("max.in.flight.requests.per.connection", 1);
            statusProps.put("acks", "all");

            Producer<Integer,Message> heartbeatProducer = new Producer<>(heartbeatProps);

            Producer<Integer,Message> speedProducer = new Producer<>(speedProps);

            Producer<Integer,Message> statusProducer = new Producer<>(statusProps);

            //System.out.println("[Collect] User Dir: " + System.getProperty("user.dir"));
            //System.out.println("[Collect] Path Input Field: " + filePath.getText());

            String file = filePath.getText();
            if(file.equals("(default path is ~/<ProjectLocation>/src/data)")) {
                file = System.getProperty("user.dir") + "/src/data/CAR.TXT";
            }
            
            String[] activeTopics = new String[topicNames.length];
            if(batchTopicCheckbox.isSelected()) {
                activeTopics[0] = "BatchTopic";
            }
            if(reportTopicCheckbox.isSelected()) {
                activeTopics[1] = "ReportTopic";
            }
            if(alarmTopicCheckbox.isSelected()) {
                activeTopics[2] = "AlarmTopic";
            }
            
            try{
                CAR = new BufferedReader(new FileReader(file));
                logs.append("Data file successfully opened for reading.\n");
                String line = CAR.readLine();
                String[] content;
                String car_reg; Long timestamp; int msgType; int speed; String status;
                int tmpCtr = 1;
                while(line != null && processFile) {
                    Message msg;
                    content = line.split("\\|");
                    car_reg = content[1].trim();
                    timestamp = Long.valueOf(content[2].trim());
                    msgType = Integer.valueOf(content[3].trim());
                    switch(msgType) {
                        case 0:
                            msg = new Message(car_reg,timestamp,msgType);
                            for(String topic : activeTopics){
                                if(topic != null) {
                                    heartbeatProducer.fireAndForget(topic, null,tmpCtr,msg);
                                }
                            }
                            processedMessages.put(0, processedMessages.get(0)+1);
                            total++;
                            break;
                        case 1:
                            speed = Integer.valueOf(content[4].trim());
                            msg = new Message(car_reg,timestamp,msgType,speed);
                            for(String topic : activeTopics){
                                if(topic != null) {
                                    speedProducer.fireAndForget(topic,0,tmpCtr,msg);
                                }
                            }
                            processedMessages.put(1, processedMessages.get(1)+1);
                            total++;
                            break;
                        case 2:
                            status = content[4].trim();
                            msg = new Message(car_reg,timestamp,msgType,status);
                            for(String topic : activeTopics){
                                if(topic != null) {
                                    boolean send=true;
                                    while(send){
                                        try {
                                            send=false;
                                            statusProducer.sendSync(topic,0,tmpCtr,msg);
                                        } catch (InterruptedException ex) {
                                            send=true;
                                        } catch (ExecutionException ex) {
                                            send=true;
                                        }
                                    }
                                }
    //                            statusProducer.fireAndForget(topic,0,tmpCtr,msg);
                            }
                            processedMessages.put(2, processedMessages.get(2)+1);
                            total++;
                            break;
                    }
                    Thread.sleep(((Integer)timeout.getValue())*1000);
                    line = CAR.readLine();
                    tmpCtr++;
                }
    //            heartbeatProducer.sendSync(this.topicNames,""+tmpCtr, new Message("",0l,4));
                heartbeatProducer.close();
                speedProducer.close();
                statusProducer.close();

                stopBtn.setEnabled(false);
                startBtn.setEnabled(true);
                timeout.setEnabled(true);

                String tmp ="Heartbeat: "+processedMessages.get(0)+"; Speed: "+processedMessages.get(1)+"; Status: "+processedMessages.get(2)+"; Total: "+total+"\n";
                logs.append(tmp);

            } catch (IOException ex) {
                //ex.printStackTrace();
                String errorMsg = "Unable to open file for reading. Please make sure you write the correct path to the data file.";
                System.err.println("[Collect] " + errorMsg);
                System.err.println("[Collect] " + ex);
                logs.append("Error: " + errorMsg + "\n");
            } catch (InterruptedException ex) {
                Logger.getLogger(CollectEntity.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        
    }

}
